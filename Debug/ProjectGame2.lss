
ProjectGame2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  0000067a  0000070e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000067a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080012e  0080012e  0000073c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da2  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f3  00000000  00000000  0000157e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000575  00000000  00000000  00001e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000023e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051e  00000000  00000000  0000242c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d6  00000000  00000000  0000294a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002d20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 32       	cpi	r26, 0x2E	; 46
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e2       	ldi	r26, 0x2E	; 46
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 33       	cpi	r26, 0x39	; 57
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8c d1       	rcall	.+792    	; 0x3dc <main>
  c4:	d8 c2       	rjmp	.+1456   	; 0x676 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Movement>:
unsigned char pointTotal = 0;
static int w[8] = {0b11111110,0b11111111,0b00000011,0b11111111,0b11111111,0b00000011,0b11111111,0b11111110};

enum MoveStates {move_init,move_ingame}MoveState;
void Movement() {
	unsigned char button = ~PINA & 0x04;
  c8:	80 b1       	in	r24, 0x00	; 0
  ca:	80 95       	com	r24
  cc:	84 70       	andi	r24, 0x04	; 4
	switch(MoveState) {					//transition
  ce:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <MoveState>
  d2:	99 23       	and	r25, r25
  d4:	19 f0       	breq	.+6      	; 0xdc <Movement+0x14>
  d6:	91 30       	cpi	r25, 0x01	; 1
  d8:	69 f0       	breq	.+26     	; 0xf4 <Movement+0x2c>
  da:	16 c0       	rjmp	.+44     	; 0x108 <Movement+0x40>
		case move_init:
			if(button) {
  dc:	88 23       	and	r24, r24
  de:	e1 f0       	breq	.+56     	; 0x118 <Movement+0x50>
				MoveState = move_ingame;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <MoveState>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	8f e4       	ldi	r24, 0x4F	; 79
  e8:	93 ec       	ldi	r25, 0xC3	; 195
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <Movement+0x22>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <Movement+0x28>
  f0:	00 00       	nop
  f2:	0a c0       	rjmp	.+20     	; 0x108 <Movement+0x40>
				_delay_ms(200);
			}
		break;
		case move_ingame:
			if(button) {
  f4:	88 23       	and	r24, r24
  f6:	b1 f0       	breq	.+44     	; 0x124 <Movement+0x5c>
				MoveState = move_init;
  f8:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <MoveState>
  fc:	8f e4       	ldi	r24, 0x4F	; 79
  fe:	93 ec       	ldi	r25, 0xC3	; 195
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <Movement+0x38>
 104:	00 c0       	rjmp	.+0      	; 0x106 <Movement+0x3e>
 106:	00 00       	nop
				_delay_ms(200);
			}
		break;	
	}
	switch(MoveState) {					//actions
 108:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <MoveState>
 10c:	88 23       	and	r24, r24
 10e:	21 f0       	breq	.+8      	; 0x118 <Movement+0x50>
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	09 f0       	breq	.+2      	; 0x116 <Movement+0x4e>
 114:	a9 c0       	rjmp	.+338    	; 0x268 <Movement+0x1a0>
 116:	06 c0       	rjmp	.+12     	; 0x124 <Movement+0x5c>
		case move_init:
		row = 0;
 118:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <row>
		column = 1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <column>
		break;
 122:	08 95       	ret
		case move_ingame:
		//JOYSTICK----------------------------------------------------------------------
		switch (ADMUX) {
 124:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 128:	80 34       	cpi	r24, 0x40	; 64
 12a:	19 f0       	breq	.+6      	; 0x132 <Movement+0x6a>
 12c:	81 34       	cpi	r24, 0x41	; 65
 12e:	b9 f0       	breq	.+46     	; 0x15e <Movement+0x96>
 130:	2b c0       	rjmp	.+86     	; 0x188 <Movement+0xc0>
			case 0x40: {
				ADCSRA |=(1<<ADSC);//start ADC conversion
 132:	ea e7       	ldi	r30, 0x7A	; 122
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	80 83       	st	Z, r24
				while ( !(ADCSRA & (1<<ADIF)));//wait till ADC conversion
 13c:	80 81       	ld	r24, Z
 13e:	84 ff       	sbrs	r24, 4
 140:	fd cf       	rjmp	.-6      	; 0x13c <Movement+0x74>
				HORIZONTALMOV = ADC;//moving value
 142:	e8 e7       	ldi	r30, 0x78	; 120
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	91 81       	ldd	r25, Z+1	; 0x01
 14a:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <HORIZONTALMOV+0x1>
 14e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <HORIZONTALMOV>
				ADC=0;//reset ADC register
 152:	11 82       	std	Z+1, r1	; 0x01
 154:	10 82       	st	Z, r1
				ADMUX=0x41;//changing channel
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
				break;
 15c:	15 c0       	rjmp	.+42     	; 0x188 <Movement+0xc0>
			}

			case 0x41: {
				ADCSRA |=(1<<ADSC);// start ADC conversion
 15e:	ea e7       	ldi	r30, 0x7A	; 122
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	80 64       	ori	r24, 0x40	; 64
 166:	80 83       	st	Z, r24
				while ( !(ADCSRA & (1<<ADIF)));// wait till ADC conversion
 168:	80 81       	ld	r24, Z
 16a:	84 ff       	sbrs	r24, 4
 16c:	fd cf       	rjmp	.-6      	; 0x168 <Movement+0xa0>
				VERTICAlMOV = ADC;// moving value
 16e:	e8 e7       	ldi	r30, 0x78	; 120
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	91 81       	ldd	r25, Z+1	; 0x01
 176:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <VERTICAlMOV+0x1>
 17a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <VERTICAlMOV>
				ADC=0;// reset ADC register
 17e:	11 82       	std	Z+1, r1	; 0x01
 180:	10 82       	st	Z, r1
				ADMUX=0x40;// changing channel
 182:	80 e4       	ldi	r24, 0x40	; 64
 184:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
				break;
			}
		}
	
		if (HORIZONTALMOV<HORIZONTAL-50) {
 188:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <HORIZONTAL>
 18c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <HORIZONTAL+0x1>
 190:	c2 97       	sbiw	r24, 0x32	; 50
 192:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <HORIZONTALMOV>
 196:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <HORIZONTALMOV+0x1>
 19a:	28 17       	cp	r18, r24
 19c:	39 07       	cpc	r19, r25
 19e:	84 f4       	brge	.+32     	; 0x1c0 <Movement+0xf8>
			if (column < 128) column = column << 1;
 1a0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <column>
 1a4:	88 23       	and	r24, r24
 1a6:	1c f0       	brlt	.+6      	; 0x1ae <Movement+0xe6>
 1a8:	88 0f       	add	r24, r24
 1aa:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <column>
 1ae:	9f e5       	ldi	r25, 0x5F	; 95
 1b0:	2a ee       	ldi	r18, 0xEA	; 234
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	91 50       	subi	r25, 0x01	; 1
 1b6:	20 40       	sbci	r18, 0x00	; 0
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <Movement+0xec>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <Movement+0xf6>
 1be:	00 00       	nop
			_delay_ms(300);
		}

		if (HORIZONTALMOV>(HORIZONTAL+50)) {
 1c0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <HORIZONTAL>
 1c4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <HORIZONTAL+0x1>
 1c8:	c2 96       	adiw	r24, 0x32	; 50
 1ca:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <HORIZONTALMOV>
 1ce:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <HORIZONTALMOV+0x1>
 1d2:	82 17       	cp	r24, r18
 1d4:	93 07       	cpc	r25, r19
 1d6:	84 f4       	brge	.+32     	; 0x1f8 <Movement+0x130>
			if (column > 1) column = column >> 1;
 1d8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <column>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	18 f0       	brcs	.+6      	; 0x1e6 <Movement+0x11e>
 1e0:	86 95       	lsr	r24
 1e2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <column>
 1e6:	9f e5       	ldi	r25, 0x5F	; 95
 1e8:	2a ee       	ldi	r18, 0xEA	; 234
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	91 50       	subi	r25, 0x01	; 1
 1ee:	20 40       	sbci	r18, 0x00	; 0
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <Movement+0x124>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <Movement+0x12e>
 1f6:	00 00       	nop
			_delay_ms(300);
		}
	
		if (VERTICAlMOV<VERTICAl-50) {
 1f8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <VERTICAl>
 1fc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <VERTICAl+0x1>
 200:	c2 97       	sbiw	r24, 0x32	; 50
 202:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <VERTICAlMOV>
 206:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <VERTICAlMOV+0x1>
 20a:	28 17       	cp	r18, r24
 20c:	39 07       	cpc	r19, r25
 20e:	84 f4       	brge	.+32     	; 0x230 <Movement+0x168>
			if(row < 7) row++;
 210:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <row>
 214:	87 30       	cpi	r24, 0x07	; 7
 216:	18 f4       	brcc	.+6      	; 0x21e <Movement+0x156>
 218:	8f 5f       	subi	r24, 0xFF	; 255
 21a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <row>
 21e:	9f e5       	ldi	r25, 0x5F	; 95
 220:	2a ee       	ldi	r18, 0xEA	; 234
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	91 50       	subi	r25, 0x01	; 1
 226:	20 40       	sbci	r18, 0x00	; 0
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <Movement+0x15c>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <Movement+0x166>
 22e:	00 00       	nop
			_delay_ms(300);
		}

		if (VERTICAlMOV>VERTICAl+50) {
 230:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <VERTICAl>
 234:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <VERTICAl+0x1>
 238:	c2 96       	adiw	r24, 0x32	; 50
 23a:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <VERTICAlMOV>
 23e:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <VERTICAlMOV+0x1>
 242:	82 17       	cp	r24, r18
 244:	93 07       	cpc	r25, r19
 246:	84 f4       	brge	.+32     	; 0x268 <Movement+0x1a0>
			if(row > 0) row--;
 248:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <row>
 24c:	88 23       	and	r24, r24
 24e:	19 f0       	breq	.+6      	; 0x256 <Movement+0x18e>
 250:	81 50       	subi	r24, 0x01	; 1
 252:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <row>
 256:	9f e5       	ldi	r25, 0x5F	; 95
 258:	2a ee       	ldi	r18, 0xEA	; 234
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	91 50       	subi	r25, 0x01	; 1
 25e:	20 40       	sbci	r18, 0x00	; 0
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <Movement+0x194>
 264:	00 c0       	rjmp	.+0      	; 0x266 <Movement+0x19e>
 266:	00 00       	nop
 268:	08 95       	ret

0000026a <Points>:
	}
}

enum PointStates{point_init,point_wait,point_change}PointState;
void Points() {
	unsigned char button = ~PINA & 0x04;
 26a:	80 b1       	in	r24, 0x00	; 0
 26c:	80 95       	com	r24
 26e:	84 70       	andi	r24, 0x04	; 4
	
	switch(PointState) {				//transition
 270:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <PointState>
 274:	99 23       	and	r25, r25
 276:	19 f0       	breq	.+6      	; 0x27e <Points+0x14>
 278:	91 30       	cpi	r25, 0x01	; 1
 27a:	71 f0       	breq	.+28     	; 0x298 <Points+0x2e>
 27c:	41 c0       	rjmp	.+130    	; 0x300 <Points+0x96>
		case point_init:
			if(button) {
 27e:	88 23       	and	r24, r24
 280:	09 f4       	brne	.+2      	; 0x284 <Points+0x1a>
 282:	47 c0       	rjmp	.+142    	; 0x312 <Points+0xa8>
				PointState = point_wait;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <PointState>
 28a:	8f e4       	ldi	r24, 0x4F	; 79
 28c:	93 ec       	ldi	r25, 0xC3	; 195
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <Points+0x24>
 292:	00 c0       	rjmp	.+0      	; 0x294 <Points+0x2a>
 294:	00 00       	nop
 296:	34 c0       	rjmp	.+104    	; 0x300 <Points+0x96>
				_delay_ms(200);
			}
		break;
		case point_wait:
			if(button) {
 298:	88 23       	and	r24, r24
 29a:	41 f0       	breq	.+16     	; 0x2ac <Points+0x42>
				PointState = point_init;
 29c:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <PointState>
 2a0:	8f e4       	ldi	r24, 0x4F	; 79
 2a2:	93 ec       	ldi	r25, 0xC3	; 195
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <Points+0x3a>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <Points+0x40>
 2aa:	00 00       	nop
				_delay_ms(200);
			}
			if(cnt > point_timer) {			//time up
 2ac:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <cnt>
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	a0 e0       	ldi	r26, 0x00	; 0
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <point_timer>
 2ba:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <point_timer+0x1>
 2be:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <point_timer+0x2>
 2c2:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <point_timer+0x3>
 2c6:	48 17       	cp	r20, r24
 2c8:	59 07       	cpc	r21, r25
 2ca:	6a 07       	cpc	r22, r26
 2cc:	7b 07       	cpc	r23, r27
 2ce:	24 f4       	brge	.+8      	; 0x2d8 <Points+0x6e>
				PointState = point_change;
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <PointState>
 2d6:	39 c0       	rjmp	.+114    	; 0x34a <Points+0xe0>
			}
			else if (i==row && PORT[j] == column) {							//point capture
 2d8:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <i>
 2dc:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <row>
 2e0:	98 13       	cpse	r25, r24
 2e2:	72 c0       	rjmp	.+228    	; 0x3c8 <Points+0x15e>
 2e4:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <j>
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	eb 5e       	subi	r30, 0xEB	; 235
 2ec:	fe 4f       	sbci	r31, 0xFE	; 254
 2ee:	90 81       	ld	r25, Z
 2f0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <column>
 2f4:	98 13       	cpse	r25, r24
 2f6:	5e c0       	rjmp	.+188    	; 0x3b4 <Points+0x14a>
				PointState = point_change;
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <PointState>
 2fe:	2b c0       	rjmp	.+86     	; 0x356 <Points+0xec>
			}
		break;
		case point_change:
		break;
	}
	switch(PointState) {				//action
 300:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <PointState>
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	d9 f0       	breq	.+54     	; 0x33e <Points+0xd4>
 308:	20 f0       	brcs	.+8      	; 0x312 <Points+0xa8>
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	09 f0       	breq	.+2      	; 0x310 <Points+0xa6>
 30e:	65 c0       	rjmp	.+202    	; 0x3da <Points+0x170>
 310:	1c c0       	rjmp	.+56     	; 0x34a <Points+0xe0>
		case point_init :
		i = 7;
 312:	87 e0       	ldi	r24, 0x07	; 7
 314:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <i>
		j = 7;
 318:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <j>
		pointTotal = 0;
 31c:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
		point_timer = 1000;
 320:	88 ee       	ldi	r24, 0xE8	; 232
 322:	93 e0       	ldi	r25, 0x03	; 3
 324:	a0 e0       	ldi	r26, 0x00	; 0
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <point_timer>
 32c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <point_timer+0x1>
 330:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <point_timer+0x2>
 334:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <point_timer+0x3>
		cnt = 0;
 338:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <cnt>
		break;
 33c:	08 95       	ret
		case point_wait :
		cnt++;
 33e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <cnt>
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <cnt>
		break;
 348:	08 95       	ret
		case point_change:
		if(i==row && PORT[j] == column) {
 34a:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <i>
 34e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <row>
 352:	98 13       	cpse	r25, r24
 354:	23 c0       	rjmp	.+70     	; 0x39c <Points+0x132>
 356:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <j>
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	eb 5e       	subi	r30, 0xEB	; 235
 35e:	fe 4f       	sbci	r31, 0xFE	; 254
 360:	90 81       	ld	r25, Z
 362:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <column>
 366:	98 13       	cpse	r25, r24
 368:	19 c0       	rjmp	.+50     	; 0x39c <Points+0x132>
			pointTotal++;
 36a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 36e:	8f 5f       	subi	r24, 0xFF	; 255
 370:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
			point_timer -= 100;
 374:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <point_timer>
 378:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <point_timer+0x1>
 37c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <point_timer+0x2>
 380:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <point_timer+0x3>
 384:	84 56       	subi	r24, 0x64	; 100
 386:	91 09       	sbc	r25, r1
 388:	a1 09       	sbc	r26, r1
 38a:	b1 09       	sbc	r27, r1
 38c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <point_timer>
 390:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <point_timer+0x1>
 394:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <point_timer+0x2>
 398:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <point_timer+0x3>
		}
		cnt = 0;
 39c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <cnt>
		//i--;
		j = rand() % 7;
 3a0:	ff d0       	rcall	.+510    	; 0x5a0 <rand>
 3a2:	67 e0       	ldi	r22, 0x07	; 7
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	8e d0       	rcall	.+284    	; 0x4c4 <__divmodhi4>
 3a8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <j>
		PointState = point_wait;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <PointState>
		break;
	}
};	
 3b2:	08 95       	ret
			}
		break;
		case point_change:
		break;
	}
	switch(PointState) {				//action
 3b4:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <PointState>
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	09 f4       	brne	.+2      	; 0x3be <Points+0x154>
 3bc:	c0 cf       	rjmp	.-128    	; 0x33e <Points+0xd4>
 3be:	08 f4       	brcc	.+2      	; 0x3c2 <Points+0x158>
 3c0:	a8 cf       	rjmp	.-176    	; 0x312 <Points+0xa8>
 3c2:	82 30       	cpi	r24, 0x02	; 2
 3c4:	51 f4       	brne	.+20     	; 0x3da <Points+0x170>
 3c6:	c7 cf       	rjmp	.-114    	; 0x356 <Points+0xec>
 3c8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <PointState>
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <Points+0x168>
 3d0:	b6 cf       	rjmp	.-148    	; 0x33e <Points+0xd4>
 3d2:	08 f4       	brcc	.+2      	; 0x3d6 <Points+0x16c>
 3d4:	9e cf       	rjmp	.-196    	; 0x312 <Points+0xa8>
 3d6:	82 30       	cpi	r24, 0x02	; 2
 3d8:	09 f3       	breq	.-62     	; 0x39c <Points+0x132>
 3da:	08 95       	ret

000003dc <main>:
	}
};	

int main(void)
{
	DDRA = 0x00, PORTA = 0xFF;		//input joystick
 3dc:	11 b8       	out	0x01, r1	; 1
 3de:	8f ef       	ldi	r24, 0xFF	; 255
 3e0:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF, PORTB = 0x00;		//output
 3e2:	84 b9       	out	0x04, r24	; 4
 3e4:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF, PORTC = 0x00;		//output	
 3e6:	87 b9       	out	0x07, r24	; 7
 3e8:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF, PORTD = 0x00;		//output
 3ea:	8a b9       	out	0x0a, r24	; 10
 3ec:	1b b8       	out	0x0b, r1	; 11
	
	ADMUX |=(1<<REFS0);
 3ee:	ec e7       	ldi	r30, 0x7C	; 124
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	80 64       	ori	r24, 0x40	; 64
 3f6:	80 83       	st	Z, r24
	ADCSRA |=(1<<ADEN) |(1<ADPS2)|(1<ADPS1) |(1<<ADPS0);
 3f8:	ea e7       	ldi	r30, 0x7A	; 122
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	81 68       	ori	r24, 0x81	; 129
 400:	80 83       	st	Z, r24

	
	
	MoveState = move_init;
 402:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <MoveState>
	PointState = point_init;
 406:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <PointState>
	row = 0;
 40a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <row>
	column = 1;
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <column>
 414:	cd e2       	ldi	r28, 0x2D	; 45
 416:	d1 e0       	ldi	r29, 0x01	; 1
	
    while (1) 
    {
		Movement();
 418:	57 de       	rcall	.-850    	; 0xc8 <Movement>
		PORTC = PORT[row];
 41a:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <row>
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	eb 5e       	subi	r30, 0xEB	; 235
 422:	fe 4f       	sbci	r31, 0xFE	; 254
 424:	80 81       	ld	r24, Z
 426:	88 b9       	out	0x08, r24	; 8
		PORTD = ~column;
 428:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <column>
 42c:	80 95       	com	r24
 42e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 430:	81 ee       	ldi	r24, 0xE1	; 225
 432:	94 e0       	ldi	r25, 0x04	; 4
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop
		_delay_us(5000);
		PORTC= 0;
		Points();
 43c:	18 b8       	out	0x08, r1	; 8
 43e:	15 df       	rcall	.-470    	; 0x26a <Points>
		PORTC = PORT[i];
 440:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <i>
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	eb 5e       	subi	r30, 0xEB	; 235
 448:	fe 4f       	sbci	r31, 0xFE	; 254
 44a:	80 81       	ld	r24, Z
 44c:	88 b9       	out	0x08, r24	; 8
		PORTD = ~pointColumn[j];
 44e:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <j>
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	e3 5f       	subi	r30, 0xF3	; 243
 456:	fe 4f       	sbci	r31, 0xFE	; 254
 458:	80 81       	ld	r24, Z
 45a:	80 95       	com	r24
 45c:	8b b9       	out	0x0b, r24	; 11
 45e:	81 ee       	ldi	r24, 0xE1	; 225
 460:	94 e0       	ldi	r25, 0x04	; 4
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 468:	00 00       	nop
		_delay_us(5000);
		
		if(pointTotal >= 5) {
 46a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 46e:	85 30       	cpi	r24, 0x05	; 5
 470:	98 f2       	brcs	.-90     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			MoveState = move_init;
 472:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <MoveState>
			PointState = point_init;
 476:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <PointState>
 47a:	28 ee       	ldi	r18, 0xE8	; 232
 47c:	33 e0       	ldi	r19, 0x03	; 3
 47e:	13 c0       	rjmp	.+38     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
			for(int a = 0; a < 1000; a++) {	//0b11111110,0b11111111,0b00000011,0b11111111,0b11111111,0b00000011,0b11111111,0b11111110
				for(int b = 0; b < 8; b++) {
					PORTC = pointColumn[b];
 480:	8d 91       	ld	r24, X+
 482:	88 b9       	out	0x08, r24	; 8
					PORTD = ~w[b];
 484:	80 81       	ld	r24, Z
 486:	32 96       	adiw	r30, 0x02	; 2
 488:	80 95       	com	r24
 48a:	8b b9       	out	0x0b, r24	; 11
 48c:	81 ee       	ldi	r24, 0xE1	; 225
 48e:	94 e0       	ldi	r25, 0x04	; 4
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	f1 f7       	brne	.-4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 494:	00 c0       	rjmp	.+0      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 496:	00 00       	nop
		
		if(pointTotal >= 5) {
			MoveState = move_init;
			PointState = point_init;
			for(int a = 0; a < 1000; a++) {	//0b11111110,0b11111111,0b00000011,0b11111111,0b11111111,0b00000011,0b11111111,0b11111110
				for(int b = 0; b < 8; b++) {
 498:	ec 17       	cp	r30, r28
 49a:	fd 07       	cpc	r31, r29
 49c:	89 f7       	brne	.-30     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
					PORTC = pointColumn[b];
					PORTD = ~w[b];
					_delay_us(5000);
				}
				PORTC = 0;
 49e:	18 b8       	out	0x08, r1	; 8
 4a0:	21 50       	subi	r18, 0x01	; 1
 4a2:	31 09       	sbc	r19, r1
		_delay_us(5000);
		
		if(pointTotal >= 5) {
			MoveState = move_init;
			PointState = point_init;
			for(int a = 0; a < 1000; a++) {	//0b11111110,0b11111111,0b00000011,0b11111111,0b11111111,0b00000011,0b11111111,0b11111110
 4a4:	29 f0       	breq	.+10     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4a6:	ad e0       	ldi	r26, 0x0D	; 13
 4a8:	b1 e0       	ldi	r27, 0x01	; 1
 4aa:	ed e1       	ldi	r30, 0x1D	; 29
 4ac:	f1 e0       	ldi	r31, 0x01	; 1
 4ae:	e8 cf       	rjmp	.-48     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b0:	9f e3       	ldi	r25, 0x3F	; 63
 4b2:	22 e4       	ldi	r18, 0x42	; 66
 4b4:	8f e0       	ldi	r24, 0x0F	; 15
 4b6:	91 50       	subi	r25, 0x01	; 1
 4b8:	20 40       	sbci	r18, 0x00	; 0
 4ba:	80 40       	sbci	r24, 0x00	; 0
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4c0:	00 00       	nop
 4c2:	aa cf       	rjmp	.-172    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>

000004c4 <__divmodhi4>:
 4c4:	97 fb       	bst	r25, 7
 4c6:	07 2e       	mov	r0, r23
 4c8:	16 f4       	brtc	.+4      	; 0x4ce <__divmodhi4+0xa>
 4ca:	00 94       	com	r0
 4cc:	06 d0       	rcall	.+12     	; 0x4da <__divmodhi4_neg1>
 4ce:	77 fd       	sbrc	r23, 7
 4d0:	08 d0       	rcall	.+16     	; 0x4e2 <__divmodhi4_neg2>
 4d2:	0b d0       	rcall	.+22     	; 0x4ea <__udivmodhi4>
 4d4:	07 fc       	sbrc	r0, 7
 4d6:	05 d0       	rcall	.+10     	; 0x4e2 <__divmodhi4_neg2>
 4d8:	3e f4       	brtc	.+14     	; 0x4e8 <__divmodhi4_exit>

000004da <__divmodhi4_neg1>:
 4da:	90 95       	com	r25
 4dc:	81 95       	neg	r24
 4de:	9f 4f       	sbci	r25, 0xFF	; 255
 4e0:	08 95       	ret

000004e2 <__divmodhi4_neg2>:
 4e2:	70 95       	com	r23
 4e4:	61 95       	neg	r22
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255

000004e8 <__divmodhi4_exit>:
 4e8:	08 95       	ret

000004ea <__udivmodhi4>:
 4ea:	aa 1b       	sub	r26, r26
 4ec:	bb 1b       	sub	r27, r27
 4ee:	51 e1       	ldi	r21, 0x11	; 17
 4f0:	07 c0       	rjmp	.+14     	; 0x500 <__udivmodhi4_ep>

000004f2 <__udivmodhi4_loop>:
 4f2:	aa 1f       	adc	r26, r26
 4f4:	bb 1f       	adc	r27, r27
 4f6:	a6 17       	cp	r26, r22
 4f8:	b7 07       	cpc	r27, r23
 4fa:	10 f0       	brcs	.+4      	; 0x500 <__udivmodhi4_ep>
 4fc:	a6 1b       	sub	r26, r22
 4fe:	b7 0b       	sbc	r27, r23

00000500 <__udivmodhi4_ep>:
 500:	88 1f       	adc	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	5a 95       	dec	r21
 506:	a9 f7       	brne	.-22     	; 0x4f2 <__udivmodhi4_loop>
 508:	80 95       	com	r24
 50a:	90 95       	com	r25
 50c:	bc 01       	movw	r22, r24
 50e:	cd 01       	movw	r24, r26
 510:	08 95       	ret

00000512 <do_rand>:
 512:	8f 92       	push	r8
 514:	9f 92       	push	r9
 516:	af 92       	push	r10
 518:	bf 92       	push	r11
 51a:	cf 92       	push	r12
 51c:	df 92       	push	r13
 51e:	ef 92       	push	r14
 520:	ff 92       	push	r15
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	ec 01       	movw	r28, r24
 528:	68 81       	ld	r22, Y
 52a:	79 81       	ldd	r23, Y+1	; 0x01
 52c:	8a 81       	ldd	r24, Y+2	; 0x02
 52e:	9b 81       	ldd	r25, Y+3	; 0x03
 530:	61 15       	cp	r22, r1
 532:	71 05       	cpc	r23, r1
 534:	81 05       	cpc	r24, r1
 536:	91 05       	cpc	r25, r1
 538:	21 f4       	brne	.+8      	; 0x542 <do_rand+0x30>
 53a:	64 e2       	ldi	r22, 0x24	; 36
 53c:	79 ed       	ldi	r23, 0xD9	; 217
 53e:	8b e5       	ldi	r24, 0x5B	; 91
 540:	97 e0       	ldi	r25, 0x07	; 7
 542:	2d e1       	ldi	r18, 0x1D	; 29
 544:	33 ef       	ldi	r19, 0xF3	; 243
 546:	41 e0       	ldi	r20, 0x01	; 1
 548:	50 e0       	ldi	r21, 0x00	; 0
 54a:	38 d0       	rcall	.+112    	; 0x5bc <__divmodsi4>
 54c:	49 01       	movw	r8, r18
 54e:	5a 01       	movw	r10, r20
 550:	9b 01       	movw	r18, r22
 552:	ac 01       	movw	r20, r24
 554:	a7 ea       	ldi	r26, 0xA7	; 167
 556:	b1 e4       	ldi	r27, 0x41	; 65
 558:	4d d0       	rcall	.+154    	; 0x5f4 <__muluhisi3>
 55a:	6b 01       	movw	r12, r22
 55c:	7c 01       	movw	r14, r24
 55e:	ac ee       	ldi	r26, 0xEC	; 236
 560:	b4 ef       	ldi	r27, 0xF4	; 244
 562:	a5 01       	movw	r20, r10
 564:	94 01       	movw	r18, r8
 566:	52 d0       	rcall	.+164    	; 0x60c <__mulohisi3>
 568:	dc 01       	movw	r26, r24
 56a:	cb 01       	movw	r24, r22
 56c:	8c 0d       	add	r24, r12
 56e:	9d 1d       	adc	r25, r13
 570:	ae 1d       	adc	r26, r14
 572:	bf 1d       	adc	r27, r15
 574:	b7 ff       	sbrs	r27, 7
 576:	03 c0       	rjmp	.+6      	; 0x57e <do_rand+0x6c>
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	a1 09       	sbc	r26, r1
 57c:	b0 48       	sbci	r27, 0x80	; 128
 57e:	88 83       	st	Y, r24
 580:	99 83       	std	Y+1, r25	; 0x01
 582:	aa 83       	std	Y+2, r26	; 0x02
 584:	bb 83       	std	Y+3, r27	; 0x03
 586:	9f 77       	andi	r25, 0x7F	; 127
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	ff 90       	pop	r15
 58e:	ef 90       	pop	r14
 590:	df 90       	pop	r13
 592:	cf 90       	pop	r12
 594:	bf 90       	pop	r11
 596:	af 90       	pop	r10
 598:	9f 90       	pop	r9
 59a:	8f 90       	pop	r8
 59c:	08 95       	ret

0000059e <rand_r>:
 59e:	b9 cf       	rjmp	.-142    	; 0x512 <do_rand>

000005a0 <rand>:
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	b6 cf       	rjmp	.-148    	; 0x512 <do_rand>

000005a6 <srand>:
 5a6:	a0 e0       	ldi	r26, 0x00	; 0
 5a8:	b0 e0       	ldi	r27, 0x00	; 0
 5aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 5ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 5b2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 5b6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 5ba:	08 95       	ret

000005bc <__divmodsi4>:
 5bc:	05 2e       	mov	r0, r21
 5be:	97 fb       	bst	r25, 7
 5c0:	16 f4       	brtc	.+4      	; 0x5c6 <__divmodsi4+0xa>
 5c2:	00 94       	com	r0
 5c4:	0f d0       	rcall	.+30     	; 0x5e4 <__negsi2>
 5c6:	57 fd       	sbrc	r21, 7
 5c8:	05 d0       	rcall	.+10     	; 0x5d4 <__divmodsi4_neg2>
 5ca:	24 d0       	rcall	.+72     	; 0x614 <__udivmodsi4>
 5cc:	07 fc       	sbrc	r0, 7
 5ce:	02 d0       	rcall	.+4      	; 0x5d4 <__divmodsi4_neg2>
 5d0:	46 f4       	brtc	.+16     	; 0x5e2 <__divmodsi4_exit>
 5d2:	08 c0       	rjmp	.+16     	; 0x5e4 <__negsi2>

000005d4 <__divmodsi4_neg2>:
 5d4:	50 95       	com	r21
 5d6:	40 95       	com	r20
 5d8:	30 95       	com	r19
 5da:	21 95       	neg	r18
 5dc:	3f 4f       	sbci	r19, 0xFF	; 255
 5de:	4f 4f       	sbci	r20, 0xFF	; 255
 5e0:	5f 4f       	sbci	r21, 0xFF	; 255

000005e2 <__divmodsi4_exit>:
 5e2:	08 95       	ret

000005e4 <__negsi2>:
 5e4:	90 95       	com	r25
 5e6:	80 95       	com	r24
 5e8:	70 95       	com	r23
 5ea:	61 95       	neg	r22
 5ec:	7f 4f       	sbci	r23, 0xFF	; 255
 5ee:	8f 4f       	sbci	r24, 0xFF	; 255
 5f0:	9f 4f       	sbci	r25, 0xFF	; 255
 5f2:	08 95       	ret

000005f4 <__muluhisi3>:
 5f4:	31 d0       	rcall	.+98     	; 0x658 <__umulhisi3>
 5f6:	a5 9f       	mul	r26, r21
 5f8:	90 0d       	add	r25, r0
 5fa:	b4 9f       	mul	r27, r20
 5fc:	90 0d       	add	r25, r0
 5fe:	a4 9f       	mul	r26, r20
 600:	80 0d       	add	r24, r0
 602:	91 1d       	adc	r25, r1
 604:	11 24       	eor	r1, r1
 606:	08 95       	ret

00000608 <__mulshisi3>:
 608:	b7 ff       	sbrs	r27, 7
 60a:	f4 cf       	rjmp	.-24     	; 0x5f4 <__muluhisi3>

0000060c <__mulohisi3>:
 60c:	f3 df       	rcall	.-26     	; 0x5f4 <__muluhisi3>
 60e:	82 1b       	sub	r24, r18
 610:	93 0b       	sbc	r25, r19
 612:	08 95       	ret

00000614 <__udivmodsi4>:
 614:	a1 e2       	ldi	r26, 0x21	; 33
 616:	1a 2e       	mov	r1, r26
 618:	aa 1b       	sub	r26, r26
 61a:	bb 1b       	sub	r27, r27
 61c:	fd 01       	movw	r30, r26
 61e:	0d c0       	rjmp	.+26     	; 0x63a <__udivmodsi4_ep>

00000620 <__udivmodsi4_loop>:
 620:	aa 1f       	adc	r26, r26
 622:	bb 1f       	adc	r27, r27
 624:	ee 1f       	adc	r30, r30
 626:	ff 1f       	adc	r31, r31
 628:	a2 17       	cp	r26, r18
 62a:	b3 07       	cpc	r27, r19
 62c:	e4 07       	cpc	r30, r20
 62e:	f5 07       	cpc	r31, r21
 630:	20 f0       	brcs	.+8      	; 0x63a <__udivmodsi4_ep>
 632:	a2 1b       	sub	r26, r18
 634:	b3 0b       	sbc	r27, r19
 636:	e4 0b       	sbc	r30, r20
 638:	f5 0b       	sbc	r31, r21

0000063a <__udivmodsi4_ep>:
 63a:	66 1f       	adc	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	88 1f       	adc	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	1a 94       	dec	r1
 644:	69 f7       	brne	.-38     	; 0x620 <__udivmodsi4_loop>
 646:	60 95       	com	r22
 648:	70 95       	com	r23
 64a:	80 95       	com	r24
 64c:	90 95       	com	r25
 64e:	9b 01       	movw	r18, r22
 650:	ac 01       	movw	r20, r24
 652:	bd 01       	movw	r22, r26
 654:	cf 01       	movw	r24, r30
 656:	08 95       	ret

00000658 <__umulhisi3>:
 658:	a2 9f       	mul	r26, r18
 65a:	b0 01       	movw	r22, r0
 65c:	b3 9f       	mul	r27, r19
 65e:	c0 01       	movw	r24, r0
 660:	a3 9f       	mul	r26, r19
 662:	70 0d       	add	r23, r0
 664:	81 1d       	adc	r24, r1
 666:	11 24       	eor	r1, r1
 668:	91 1d       	adc	r25, r1
 66a:	b2 9f       	mul	r27, r18
 66c:	70 0d       	add	r23, r0
 66e:	81 1d       	adc	r24, r1
 670:	11 24       	eor	r1, r1
 672:	91 1d       	adc	r25, r1
 674:	08 95       	ret

00000676 <_exit>:
 676:	f8 94       	cli

00000678 <__stop_program>:
 678:	ff cf       	rjmp	.-2      	; 0x678 <__stop_program>
